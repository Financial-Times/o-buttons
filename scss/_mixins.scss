/// Output button classes, including size and theme modifiers.
/// Defaults to all sizes and themes.
///
/// @example Default button only.
///     @include oButtons;
///
/// @example Primary and secondary button modifier classes, plus big and small modifier classes. No icon buttons. No pagination or group classes.
///  @include oButtons($sizes: ('big', 'default'), $themes: ('primary', 'secondary'), $icons: (), $opts: ());
///
/// @example Primary and secondary modifier classes, plus big and small modifier classes, plus arrow left/right icon buttons for these themes and sizes. No pagination or group classes.
///  @include oButtons($sizes: ('big', 'default'), $themes: ('primary', 'secondary'), $icons: ('arrow-left', 'arrow-right'), $opts: ());
///
/// @example Primary and secondary modifier classes, plus big and small modifier classes, plus arrow left/right icon buttons for these themes and sizes, plus classes for pagination and group styles.
///  @include oButtons(
///		$sizes: ('big', 'default'),
///		$themes: ('primary', 'secondary'),
///		$icons: ('arrow-left', 'arrow-right'),
///		$ops: ('pagination', 'groups'),
///	 );
///
/// @param {List} $sizes
/// @param {List} $themes
/// @param {List} $icons
/// @param {List} $opts
@mixin oButtons(
	$sizes: $_o-buttons-sizes,
	$themes: map-keys($_o-buttons-themes),
	$icons: $_o-buttons-icons,
	$opts: ('pagination', 'groups')
) {
	$pagination-enabled: index($opts, 'pagination');
	$groups-enabled: index($opts, 'groups');

	// Base button class.
	.o-buttons {
		@include oTypographySansBold();
		@include oButtonsSize();
		display: inline-block;
		box-sizing: border-box;
		vertical-align: middle;
		margin: 0;
		border-style: solid;
		text-align: center;
		text-decoration: none;
		border-radius: $_o-buttons-border-radius;
		cursor: pointer;
		transition: 0.3s background-color, 0.15s color ease-out, 0.15s border-color ease-out;
		user-select: none;
		background-clip: border-box;
		// Prevent fat white type on a dark background
		// sass-lint:disable no-vendor-prefixes
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		-moz-appearance: none;
		-webkit-appearance: none;
		// sass-lint:enable no-vendor-prefixes

		// Same as aria-disabled:
		// http://www.w3.org/TR/wai-aria/states_and_properties#aria-disabled
		// This is a common style for all button themes
		&[disabled] {
			pointer-events: none;
			opacity: 0.4;
			cursor: default;
		}
	}

	// Base icon class.
	@if (length($icons) > 0) {
		.o-buttons-icon {
			@include oButtonsIconBaseStyles;
		}

		// Icon only modifier. Higher specificity than size modifier.
		.o-buttons.o-buttons-icon.o-buttons-icon--icon-only {
			@include _oButtonsIconIconOnly;
		}
	}


	// Size modifiers.
	@each $size in $sizes {
		.o-buttons--#{$size} {
			@include oButtonsSize($size);
		}
		@if (length($icons) > 0) {
			.o-buttons--#{$size}.o-buttons-icon {
				padding-left: _oButtonsGet('icon-padding', $size);
			}
		}
	}

	// Theme modifiers.
	@each $theme in $themes {
		$theme-selector: map-get($_o-buttons-themes, $theme);
		@if $theme-selector == null {
			@error 'Button theme "#{$theme}" does not exist. Must be one of "#{map-keys($_o-buttons-themes)}".';
		}

		@if _oButtonsSupports($theme) {
			// Output theme.
			#{$theme-selector} {
				@include oButtonsTheme($theme);
			}

			// Output icons for theme.
			@each $icon-name in $icons {
				#{$theme-selector}.o-buttons-icon--#{$icon-name} {
					@include _oButtonsIconBackgroundImage($icon-name, $theme);
				}
			}
		}
	}

	// Pagination wrapper.
	@if $pagination-enabled {
		.o-buttons-pagination {
			@include oButtonsPagination;
		}
	}

	// Group wrapper.
	@if $groups-enabled {
		.o-buttons-group {
			@include oButtonsGroup;
		}
	}
}

/// Button theme construct
/// Outputs styles for all button states
///
/// @example
/// .my-button--inverse {
/// 	@include oButtonsTheme($theme: 'inverse');
/// }
///
/// @example
/// .my-button--custom {
/// 	@include oButtonsTheme($theme: ($background: 'slate', $accent: 'lemon', $colorizer: 'primary'));
/// }
///
/// @param {String|Map} $theme
@mixin oButtonsTheme($theme) {
	@if type-of($theme) != 'string' and type-of($theme) != 'map' {
		@error 'Expected a button theme of type "string" or a custom theme of type "map", but was given a theme of type "#{type-of($theme)}": #{$theme}';
	}
	@include _oButtonsColors('default', $theme);
	// https://www.w3.org/TR/wai-aria-1.1/#aria-selected
	// https://www.w3.org/TR/wai-aria-1.1/#aria-pressed
	&[aria-selected=true], // e.g. A selected tab or page number in pagination.
	&[aria-current], // e.g. A selected tab or page number in pagination (for links only).
	&[aria-pressed=true], // e.g. A "follow" button that is pressed.
	&:active {
		@include _oButtonsColors('active', $theme);
	}
	&:not([disabled]) {
		&:hover {
			@include _oButtonsColors('hover', $theme);
			text-decoration: none;
		}
		&:focus {
			@include _oButtonsColors('focus', $theme);
		}
	}
}

/// Output button colors for a given state.
/// If no value is found for a brand variant,
/// fallback to the default value for the state.
///
/// @param {String} $state
/// @param {String|Map} $theme Defined theme or custom theme map.
@mixin _oButtonsColors($state, $theme) {
	background-color: oButtonsGetColor($state, 'background', $theme);
	color: oButtonsGetColor($state, 'color', $theme);
	border-color: oButtonsGetColor($state, 'border', $theme);
}

/// Transform custom theme into variant variables, see `_brand.scss`.
///
/// @param {Map} $theme
/// @return {Map} o-brand variables for the custom button theme
@function _oButtonsGetCustomThemeVariables($theme) {
	@if type-of($theme) != 'map' {
		@error 'Expecting custom button theme `$theme` to be a map.';
	}

	@if not map-has-key($theme, "accent") {
		@error "Please provide an accent color for the custom button theme";
	}

	@if not map-has-key($theme, "background") {
		@error "Please provide a background color for the custom button theme";
	}

	// If theme colorizer is not supported default to secondary.
	$supported-colorizers: ('secondary', 'primary');
	@if not index($supported-colorizers, map-get($theme, "colorizer")) {
		$theme: map-merge($theme, ('colorizer': 'secondary'));
	}

	$colorizer: map-get($theme, 'colorizer');
	$background: map-get($theme, 'background');
	$hover: map-get($theme, 'hover');
	$accent: map-get($theme, 'accent');

	@return (
		default-color: if($colorizer == 'secondary', oColorsGetPaletteColor($accent), oColorsGetPaletteColor($background)),
		default-background: if($colorizer == 'secondary', oColorsGetPaletteColor($background), oColorsGetPaletteColor($accent)),
		default-border: oColorsGetPaletteColor($accent),
		hover-background: if($hover == null, oColorsMix($background, $accent), oColorsGetPaletteColor($hover)),
		hover-color: if($hover == null, oColorsGetPaletteColor($accent), oColorsGetTextColor(oColorsGetPaletteColor($hover), 100)),
		focus-background: if($colorizer == 'secondary', transparent, oColorsGetPaletteColor($accent)),
		active-color: oColorsGetPaletteColor($background),
		active-background: oColorsGetPaletteColor($accent)
	);
}

/// Button size
/// Outputs dimensions for a specific button size
///
/// @example
/// .my-button--big {
/// 	@include oButtonsSize(big);
/// }
///
/// @param {String} $size
@mixin oButtonsSize($size: null) {
	@include oTypographySans($scale: _oButtonsGet('scale', $size), $line-height: 1);
	background-size: _oButtonsGet('background-size', $size);
	min-height: _oButtonsGet('min-height', $size);
	min-width: _oButtonsGet('min-width', $size);
	padding: _oButtonsGet('padding', $size);
	border-width: _oButtonsGet('border-width', $size);
}
