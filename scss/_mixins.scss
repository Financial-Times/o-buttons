/// Output button classes, including size and theme modifiers.
/// Defaults to all sizes and themes.
///
/// @example Default button classes only.
///     @include oButtons;
///
/// @example Primary and secondary button modifier classes, plus big and small modifier classes. No icon buttons. No pagination or group classes.
///    @include oButtons($opts: (
///        'sizes': ('big', 'default'),
///        'themes': ('primary', 'secondary')
///    ));
///
/// @example Primary and secondary modifier classes, plus big and small modifier classes, plus arrow left/right icon buttons for these themes and sizes. No pagination or group classes.
///    @include oButtons($opts: (
///        'sizes': ('big', 'default'),
///        'themes': ('primary', 'secondary'),
///        'icons': ('arrow-left', 'arrow-right')
///    ));
///
/// @example Primary and secondary modifier classes, plus big and small modifier classes, plus arrow left/right icon buttons for these themes and sizes, plus classes for pagination and group styles.
///    @include oButtons($opts: (
///        'sizes': ('big', 'default'),
///        'themes': ('primary', 'secondary'),
///        'icons': ('arrow-left', 'arrow-right'),
///        'pagination': true,
///        'groups': true
///    ));
///
/// @param {List} $opts
@mixin oButtons($opts: (
	'sizes': $_o-buttons-sizes,
	'types': $_o-buttons-types,
	'themes': $_o-buttons-themes,
	'icons': $_o-buttons-icons,
	'pagination': true,
	'groups': true
)) {
	$types: map-get($opts, 'types');
	$sizes: map-get($opts, 'sizes');
	$themes: map-get($opts, 'themes');
	$icons: map-get($opts, 'icons');
	$pagination-enabled: map-has-key($opts, 'pagination');
	$groups-enabled: map-has-key($opts, 'groups');

	// Base button class.
	.o-buttons {
		@include _oButtonsBaseContent();
	}

	// Base icon class.
	@if (length($icons) > 0) {
		.o-buttons-icon {
			@include _oButtonsIconBaseContent();
		}

		.o-buttons-icon__label {
			font-size: 0;
			height: 1px;
			overflow: hidden;
			display: block;
		}

		// Icon only modifier. Higher specificity than size modifier.
		.o-buttons.o-buttons-icon.o-buttons-icon--icon-only {
			@include _oButtonsIconOnlyContent();
		}
	}


	// Size modifiers.
	@each $size in $sizes {
		.o-buttons.o-buttons--#{$size} {
			@include _oButtonsSizeContent($size);
		}
		@if (length($icons) > 0) {
			.o-buttons.o-buttons--#{$size}.o-buttons-icon {
				padding-left: _oButtonsGet('icon-padding', $size);
			}
		}
	}

	// Type & theme modifiers.
	@each $type in $types {
		@if $type and _oButtonsSupports($type) {
			@include _oButtonsVariant($type: $type, $icons: $icons);
		}
		@each $theme in $themes {
			$variant: _oButtonsGetVaraint($type, $theme);
			@if $variant and _oButtonsSupports($variant) {
				@include _oButtonsVariant($type, $theme, $icons);
			}
		}
	}

	// Pagination wrapper.
	@if $pagination-enabled {
		.o-buttons-pagination {
			> .o-buttons {
				padding-left: 5px;
				padding-right: 5px;
				min-width: 24px;

				&.o-buttons--big {
					padding-left: 9px;
					padding-right: 9px;
					min-width: 36px;
				}
			}
		}
	}

	// Group wrapper.
	@if $groups-enabled {
		.o-buttons-group {
			> .o-buttons {
				position: relative;
				border-radius: 0;

				+ .o-buttons {
					margin-left: -1px;
				}

				&:hover,
				&:focus {
					z-index: 1;
				}
			}

			:first-child {
				border-bottom-left-radius: $_o-buttons-border-radius;
				border-top-left-radius: $_o-buttons-border-radius;
				border-left-width: 1px;
			}

			:last-child {
				border-bottom-right-radius: $_o-buttons-border-radius;
				border-top-right-radius: $_o-buttons-border-radius;
			}
		}
	}
}

/// Custom theme class for a button of a given type. With support for given icons.
/// @param {String|Map|Null} $theme - A theme name or a custom theme map.
@mixin oButtonsCustom($type, $theme, $icons: null) {
	$theme: map-merge($theme, ('colorizer': $type));
	@include _oButtonsVariant($type, $theme, $icons);
}


/// Button theme construct
/// Outputs styles for all button states
///
/// @param {String} $type
/// @param {String|Map} $theme
/// @param {List} $icons
@mixin _oButtonsVariant($type, $theme: null, $icons: null) {
	$custom-theme: type-of($theme) == 'map';
	$theme-name: if($custom-theme, map-get($theme, 'name'), $theme);
	$variant: _oButtonsGetVaraint($type, $theme);

	@if $theme {
		$theme-exists: index($_o-buttons-themes, $theme-name);
		@if not $theme-exists and not $custom-theme {
			@error 'Button theme "#{$theme-name}" does not exist. Must be one of "#{$_o-buttons-themes}" or a custom theme map.';
		}
		@if $custom-theme and not $theme-name {
			@error 'Cound not output custom button theme as no "name" key is specified in the theme map: "#{$theme}".';
		}
		@if $theme-exists and $custom-theme {
			@error 'Cannot output button theme "#{$theme-name}" as it already exists.';
		}
	}

	$type-selector: if($type != $_o-buttons-default-type, '.o-buttons.o-buttons--#{$type}', '.o-buttons');
	$theme-selector: if($theme-name, '.o-buttons--#{$theme-name}', '');

	#{$type-selector}#{$theme-selector} {
		@include _oButtonsVariantContent($type, $theme);
	}

	// Output icons for theme.
	@each $icon in $icons {
		#{$type-selector}#{$theme-selector}.o-buttons-icon.o-buttons-icon--#{$icon} {
			@include _oButtonsIconContent($icon, $type, $theme);
		}
	}
}

/// Transform custom theme into variant variables, see `_brand.scss`.
///
/// @param {Map} $theme
/// @return {Map} o-brand variables for the custom button theme
@function _oButtonsGetCustomThemeVariables($theme) {
	@if type-of($theme) != 'map' {
		@error 'Expecting custom button theme `$theme` to be a map.';
	}

	@if not map-has-key($theme, "accent") {
		@error "Please provide an accent color for the custom button theme";
	}

	@if not map-has-key($theme, "background") {
		@error "Please provide a background color for the custom button theme";
	}

	$colorizer: map-get($theme, 'colorizer');
	$background: map-get($theme, 'background');
	$hover: map-get($theme, 'hover');
	$accent: map-get($theme, 'accent');

	@return (
		default-color: if($colorizer == 'primary', oColorsGetPaletteColor($background), oColorsGetPaletteColor($accent)),
		default-background: if($colorizer == 'primary', oColorsGetPaletteColor($accent), oColorsGetPaletteColor($background)),
		default-border: oColorsGetPaletteColor($accent),
		hover-background: if($hover == null, oColorsMix($background, $accent), oColorsGetPaletteColor($hover)),
		hover-color: if($hover == null, oColorsGetPaletteColor($accent), oColorsGetTextColor(oColorsGetPaletteColor($hover), 100)),
		focus-background: if($colorizer == 'primary', oColorsGetPaletteColor($accent), transparent),
		active-color: oColorsGetPaletteColor($background),
		active-background: oColorsGetPaletteColor($accent)
	);
}

