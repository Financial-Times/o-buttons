/// Create a single button with a custom class.
@mixin oButtonsContent($opts: (
    'base': true,
    'type': 'secondary',
    'theme': null,
    'size': null,
    'icon': null,
    'icon-only': false,
)) {
    $base: map-get($opts, 'base');
    $theme: map-get($opts, 'theme');
    $type: map-get($opts, 'type');
    $icon-only: map-get($opts, 'icon-only');
    $size: map-get($opts, 'size');
    $icon: map-get($opts, 'icon');

    @if $base {
        @include _oButtonsBaseContent($size);
    }

    @if $type {
        @include _oButtonsColorsContent($type, $theme);
    }

    @if $icon {
        @include _oButtonsIconBaseContent($size);
        @include _oButtonsIconContent($icon, $type, $theme);
    }

    @if $icon-only {
        @include _oButtonsIconOnlyContent();
    }
}

@mixin _oButtonsIconBaseContent($size: null) {
    display: inline-block;
    background-repeat: no-repeat;
    background-position: 3px;
    padding-left: _oButtonsGet('icon-padding', $size);
}

@mixin _oButtonsIconOnlyContent() {
    padding-left: 0;
    background-position: 50%;
    min-width: 40px;
}

@mixin _oButtonsIconContent($icon, $type, $theme: null) {

    @include _oButtonsGetIcon($icon, $type, $theme, 'normal');

    $normal-icon-color: _oButtonsGetIconColor('normal', $type, $theme);
    $active-icon-color: _oButtonsGetIconColor('active', $type, $theme);
    @if($normal-icon-color != $active-icon-color) {
        // https://www.w3.org/TR/wai-aria-1.1/#aria-selected
        // https://www.w3.org/TR/wai-aria-1.1/#aria-pressed
        &[aria-selected=true], // e.g. A selected tab or page number in pagination.
        &[aria-current], // e.g. A selected tab or page number in pagination (for links only).
        &[aria-pressed=true], // e.g. A "follow" button that is pressed.
        &:active {
            @include _oButtonsGetIcon($icon, $type, $theme, 'active');
        }
        // Hack to get the active state colour svg to download to prevent FOIC
        &:after {
            @include _oButtonsGetIcon($icon, $type, $theme, 'active');
            content: '';
        }
    }

    &:not([disabled]) {
        &:hover {
            @include _oButtonsGetIcon($icon, $type, $theme, 'hover');
        }
        &:focus {
            @include _oButtonsGetIcon($icon, $type, $theme, 'focus');
        }
    }

    // Add fallback for MS High Contrast mode.
    // This only needs to be output once, not for every button state.
    // sass-lint:disable no-vendor-prefixes
    @media screen and (-ms-high-contrast: active) {
        @include oIconsGetIcon($icon-name: $icon, $apply-base-styles: false, $apply-width-height: false, $color: #ffffff, $iconset-version: 1, $high-contrast-fallback: false);
    }
    @media screen and (-ms-high-contrast: black-on-white) {
        @include oIconsGetIcon($icon-name: $icon, $apply-base-styles: false, $apply-width-height: false, $color: #000000, $iconset-version: 1, $high-contrast-fallback: false);
    }
    // sass-lint:enable no-vendor-prefixes
}

@mixin _oButtonsColorsContent($type, $theme: null) {
    background-color: oButtonsGetColor('default', 'background', $type, $theme);
    color: oButtonsGetColor('default', 'color', $type, $theme);
    border-color: oButtonsGetColor('default', 'border', $type, $theme);
    // https://www.w3.org/TR/wai-aria-1.1/#aria-selected
    // https://www.w3.org/TR/wai-aria-1.1/#aria-pressed
    &[aria-selected=true], // e.g. A selected tab or page number in pagination.
    &[aria-current], // e.g. A selected tab or page number in pagination (for links only).
    &[aria-pressed=true], // e.g. A "follow" button that is pressed.
    &:active {
        background-color: oButtonsGetColor('active', 'background', $type, $theme);
        color: oButtonsGetColor('active', 'color', $type, $theme);
        border-color: oButtonsGetColor('active', 'border', $type, $theme);
    }
    &:not([disabled]) {
        &:hover {
            background-color: oButtonsGetColor('hover', 'background', $type, $theme);
            color: oButtonsGetColor('hover', 'color', $type, $theme);
            border-color: oButtonsGetColor('hover', 'border', $type, $theme);
            text-decoration: none;
        }
        &:focus {
            background-color: oButtonsGetColor('focus', 'background', $type, $theme);
            color: oButtonsGetColor('focus', 'color', $type, $theme);
            border-color: oButtonsGetColor('focus', 'border', $type, $theme);
        }
    }
}

@mixin _oButtonsBaseContent($size: null) {
    @include oTypographySansBold();
    @include _oButtonsSizeContent($size);
    display: inline-block;
    box-sizing: border-box;
    vertical-align: middle;
    margin: 0;
    border-style: solid;
    text-align: center;
    text-decoration: none;
    border-radius: $_o-buttons-border-radius;
    cursor: pointer;
    transition: 0.3s background-color, 0.15s color ease-out, 0.15s border-color ease-out;
    user-select: none;
    background-clip: border-box;
    // Prevent fat white type on a dark background
    // sass-lint:disable no-vendor-prefixes
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -moz-appearance: none;
    -webkit-appearance: none;
    // sass-lint:enable no-vendor-prefixes

    // Same as aria-disabled:
    // http://www.w3.org/TR/wai-aria/states_and_properties#aria-disabled
    // This is a common style for all button themes
    &[disabled] {
        pointer-events: none;
        opacity: 0.4;
        cursor: default;
    }
}

@mixin _oButtonsSizeContent($size: null) {
	@include oTypographySans($scale: _oButtonsGet('scale', $size), $line-height: 1);
	background-size: _oButtonsGet('background-size', $size);
	min-height: _oButtonsGet('min-height', $size);
	min-width: _oButtonsGet('min-width', $size);
	padding: _oButtonsGet('padding', $size);
	border-width: _oButtonsGet('border-width', $size);

	// Center copy with vertical padding for browsers which do not support flexbox.
	$scale-list: oTypographyGetScale(_oButtonsGet('scale', $size));
	$font-size: nth($scale-list, 1);
	$min-height: _oButtonsGet('min-height', $size);
	$border-width: _oButtonsGet('border-width', $size);
	padding-top: calc((#{$min-height} - #{$font-size}px - (#{$border-width} * 2)) / 2);
	padding-bottom: calc((#{$min-height} - #{$font-size}px - (#{$border-width} * 2)) / 2);

	// Center copy with flexbox for browsers which support it and reset padding.
	@supports (display: inline-flex) {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: _oButtonsGet('padding', $size);
	}
}
