/// Gets the color of a button property for a given theme and state.
///
/// @example background: oButtonsGetColor($state: 'hover', $property: 'border', $type: 'primary');
/// @example background: oButtonsGetColor($state: 'hover', $property: 'border', $type: 'secondary', $theme: 'primary');
///
/// @access public
/// @param {String} $state
/// @param {String} $property
/// @param {String} $type
/// @param {String|List|Map} $theme A theme string/list or a custom theme map. Will default to the currently configured theme.
/// @return {Color} - The hex colour for a button property.
@function oButtonsGetColor($state, $property, $type, $theme: null) {
	@if(not index(('map', 'string', 'null'), type-of($theme))) {
		@error('Theme of type "#{type-of($theme)}" is not allowed, it must be of type map, string, or null.');
	}

	@if(not index(('primary', 'secondary'), $type)) {
		@error('Button type "#{$type}" is not avalible, it must be one of "primary" or "secondary" button types.');
	}

	$context: _oButtonsGet($variables: 'context', $from: $theme);
	$color: _oButtonsGet($variables: 'color', $from: $theme);

	$button-color-map: ();

	@if($type == 'primary') {
		$tint-config: map-get($o-colors-tints, $color);
		$use-tint: $context == null and $tint-config and map-has-key($tint-config, 'tints');
		$context: if($context, $context, oColorsGetColorFor('page', 'background'));

		$default-background: if($use-tint, oColorsGetTint($color, 50), oColorsMix($color, $context, 100));
		$button-color-map: (
			'default-color': oColorsGetTextColor($default-background, 100),
			'default-background': $default-background,
			'default-border': transparent,
			'hover-background': if($use-tint, oColorsGetTint($color, 40), oColorsMix($color, $context, 80)),
			'focus-background': if($use-tint, oColorsGetTint($color, 40), oColorsMix($color, $context, 80)),
			'active-background': if($use-tint, oColorsGetTint($color, 30), oColorsMix($color, $context, 70))
		);
	}

	@if($type == 'secondary') {
		$button-color-map: (
			'default-color': oColorsGetPaletteColor($color),
			'default-background': oColorsGetPaletteColor('transparent'),
			'default-border': oColorsGetPaletteColor($color),
			'hover-background': oColorsMix($color, 'transparent', 10),
			'focus-background': oColorsMix($color, 'transparent', 10),
			'active-color': oColorsGetTextColor(oColorsGetPaletteColor($color), 100),
			'active-background': oColorsGetPaletteColor($color)
		);
	}

	$state-color: map-get($button-color-map, '#{$state}-#{$property}');
	$default-color:  map-get($button-color-map, 'default-#{$property}');
	@return if($state-color, $state-color, $default-color);
}
