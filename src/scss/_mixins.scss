/// Output button classes, including size and theme modifiers.
/// Defaults to all sizes and themes.
///
/// @example Default button classes only.
///     @include oButtons;
///
/// @example Primary and secondary button modifier classes, plus big and small modifier classes. No icon buttons. No pagination or group classes.
///    @include oButtons($opts: (
///        'sizes': ('big', 'default'),
///        'themes': ('primary', 'secondary')
///    ));
///
/// @example Primary and secondary modifier classes, plus big and small modifier classes, plus arrow left/right icon buttons for these themes and sizes. No pagination or group classes.
///    @include oButtons($opts: (
///        'sizes': ('big', 'default'),
///        'themes': ('primary', 'secondary'),
///        'icons': ('arrow-left', 'arrow-right')
///    ));
///
/// @example Primary and secondary modifier classes, plus big and small modifier classes, plus arrow left/right icon buttons for these themes and sizes, plus classes for pagination and group styles.
///    @include oButtons($opts: (
///        'sizes': ('big', 'default'),
///        'themes': ('primary', 'secondary'),
///        'icons': ('arrow-left', 'arrow-right'),
///        'pagination': true,
///        'groups': true
///    ));
///
/// @param {List} $opts
@mixin oButtons($opts: (
	'sizes': $_o-buttons-sizes,
	'types': $_o-buttons-types,
	'themes': $_o-buttons-themes,
	'icons': $o-buttons-icons,
	'pagination': true,
	'groups': true
)) {
	$types: map-get($opts, 'types');
	$sizes: map-get($opts, 'sizes');
	$themes: map-get($opts, 'themes');
	$icons: map-get($opts, 'icons');
	$pagination-enabled: map-has-key($opts, 'pagination');
	$groups-enabled: map-has-key($opts, 'groups');

	// Base button class.
	.o-buttons {
		@include _oButtonsBaseContent();
	}

	// Base icon class.
	@if (length($icons) > 0) {
		.o-buttons-icon {
			@include _oButtonsIconBaseContent();
		}

		.o-buttons-icon__label {
			@include oNormaliseVisuallyHidden();
		}

		// Icon only modifier. Higher specificity than size modifier.
		.o-buttons-icon.o-buttons-icon--icon-only {
			@include _oButtonsIconOnlyContent();
		}
	}


	// Size modifiers.
	@each $size in $sizes {
		.o-buttons.o-buttons--#{$size} {
			@include _oButtonsSizeContent($size);
		}
		@if (length($icons) > 0) {
			.o-buttons--#{$size}.o-buttons-icon {
				padding-left: _oButtonsGet('icon-padding', $size);
			}
		}
	}

	// Type & theme modifiers.
	@each $type in $types {
		@if _oButtonsSupports($type) {
			@include _oButtonsVariantWithIcons($type: $type, $icons: $icons);
		}
		@each $theme in $themes {
			@if _oButtonsSupports('#{$type}-#{$theme}') {
				@include _oButtonsVariantWithIcons($type, $theme, $icons);
			}
		}
	}

	// Pagination wrapper.
	@if $pagination-enabled {
		.o-buttons-pagination {
			> .o-buttons {
				padding-left: 5px;
				padding-right: 5px;
				min-width: 24px;

				&.o-buttons--big {
					padding-left: 9px;
					padding-right: 9px;
					min-width: 36px;
				}
			}
		}
	}

	// Group wrapper.
	@if $groups-enabled {
		.o-buttons-group {
			> .o-buttons {
				position: relative;
				border-radius: 0;

				+ .o-buttons {
					margin-left: -1px;
				}

				&:hover,
				&:focus {
					z-index: 1;
				}
			}

			:first-child {
				border-bottom-left-radius: $_o-buttons-border-radius;
				border-top-left-radius: $_o-buttons-border-radius;
				border-left-width: 1px;
			}

			:last-child {
				border-bottom-right-radius: $_o-buttons-border-radius;
				border-top-right-radius: $_o-buttons-border-radius;
			}
		}
	}
}

/// Custom theme class for a button of a given type. With support for given icons.
/// @param {String|Map|Null} $theme - A theme name or a custom theme map.
/// @param {String|Map|Null} $type - A button type the theme should support e.g. primary, secondary.
/// @param {List|Null} $icons [null] - The icons which the button type and theme should support.
@mixin oButtonsAddCustom($theme, $type, $icons: null) {
	@include _oButtonsVariantWithIcons($type, $theme, $icons);
}

/// Button theme construct
/// Outputs styles for all button states
///
/// @param {String} $type
/// @param {String|Map} $theme
/// @param {List} $icons
@mixin _oButtonsVariantWithIcons($type, $theme: null, $icons: null) {
	// Get theme name if the theme is a custom theme map.
	$theme-name: if(type-of($theme) == 'map', map-get($theme, 'name'), $theme);
	// Requested a variant with a default theme.
	@if type-of($theme) == 'string' and not index($_o-buttons-themes, $theme) {
		@error 'Button theme "#{$theme}" does not exist. Must be one of "#{$_o-buttons-themes}" or a custom theme map.';
	}
	// Requested a variant with a custom theme.
	@if type-of($theme) == 'map' and not $theme-name {
		@error 'Cound not output a custom button of type "#{$type}" as no "name" key is specified in the theme map: "#{$theme}".';
	}
	@if type-of($theme) == 'map' and index($_o-buttons-themes, $theme-name) {
		@error 'Cannot output a custom button of type "#{$type}" with theme "#{$theme-name}" as a theme of that name already exists.';
	}
	// Output classes.
	$type-selector: '.o-buttons--#{$type}';
	$theme-selector: if($theme-name, '.o-buttons--#{$theme-name}', '');
	// Output variant classes.
	#{$type-selector}#{$theme-selector} {
		@include _oButtonsColorsContent($type, $theme);
	}
	// Output variant icon classes.
	@each $icon in $icons {
		#{$type-selector}#{$theme-selector}.o-buttons-icon.o-buttons-icon--#{$icon} {
			@include _oButtonsIconContent($icon, $type, $theme);
		}
	}
}
