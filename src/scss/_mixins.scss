/// Custom theme class for a button of a given type. With support for given icons.
/// @param {String} $theme - A theme name.
/// @param {Map} $theme - A custom theme map.
/// @param {String|Map|Null} $type - A button type the theme should support e.g. primary, secondary.
/// @param {List|Null} $icons [null] - The icons which the button type and theme should support.
@mixin oButtonsAddCustomTheme($name, $opts, $types, $icons: null) {
	$theme: map-merge($opts, ('name': $name));
	@each $type in $types {
		@include _oButtonsAddButton($type, $theme, $icons);
	}
}

/// Button theme construct
/// Outputs styles for all button states
///
/// @param {String} $type
/// @param {String|Map} $theme
/// @param {List} $icons
@mixin _oButtonsAddButton($type, $theme: null, $icons: null) {
	// Get theme name if the theme is a custom theme map.
	$theme-name: if(type-of($theme) == 'map', map-get($theme, 'name'), $theme);
	// Requested a variant with a default theme.
	@if type-of($theme) == 'string' and not index($_o-buttons-themes, $theme) {
		@error 'Button theme "#{$theme}" does not exist. Must be one of "#{$_o-buttons-themes}" or a custom theme map.';
	}
	// Requested a variant with a custom theme.
	@if type-of($theme) == 'map' and not $theme-name {
		@error 'Could not output a custom button of type "#{$type}" as no "name" key is specified in the theme map: "#{$theme}".';
	}
	@if type-of($theme) == 'map' and index($_o-buttons-themes, $theme-name) {
		@error 'Cannot output a custom button of type "#{$type}" with theme "#{$theme-name}" as a theme of that name already exists.';
	}
	@if type-of($theme) == 'map' and not map-has-key($theme, 'color') {
		@error 'Could not output a custom button as the theme "color" was not given.';
	}
	@if type-of($theme) == 'map' and not map-has-key($theme, 'context') {
		@error 'Could not output a custom button as the theme "context" was not given.';
	}
	// Output classes.
	$type-selector: '.o-buttons--#{$type}';
	$theme-selector: if($theme-name, '.o-buttons--#{$theme-name}', '');
	// Output variant classes.
	#{$type-selector}#{$theme-selector} {
		@include _oButtonsStateContent($type, $theme);
	}
	// Output variant icon classes.
	@each $icon in $icons {
		#{$type-selector}#{$theme-selector}.o-buttons-icon--#{$icon} {
			@include _oButtonsIconStatesContent($icon, $type, $theme);
		}
	}
}
